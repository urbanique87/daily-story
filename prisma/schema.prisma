datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String
  accounts      Account[]
  sessions      Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Answers Answer[]
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Question {
  id          Int          @id @default(autoincrement())
  question    String       @unique
  category    String
  createdAt DateTime       @default(now())

  Answers Answer[]

  @@index([category])
}

model Answer {
  id                 Int       @id @default(autoincrement())
  userId             String
  questionId         Int
  answer             String?
  assignedAt         DateTime  @default(now())
  answeredAt         DateTime?
  updatedAt          DateTime? @updatedAt
  deletedAt          DateTime?
  isPublic           Boolean   @default(true)

  user               User      @relation(fields: [userId], references: [id])
  question           Question  @relation(fields: [questionId], references: [id])

  @@unique([userId, questionId])
}