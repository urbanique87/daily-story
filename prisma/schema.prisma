datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String
  emailVerified DateTime?
  image         String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  accounts      Account[]
  sessions      Session[]
  userQuestions UserQuestion[]
  userAnswers   UserAnswer[]

  @@unique([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  QuestionTemplate QuestionTemplate[]

  @@unique([name])
}

model QuestionTemplate {
  id         Int      @id @default(autoincrement())
  text       String
  categoryId Int
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id])

  userQuestions UserQuestion[]
  userAnswers   UserAnswer[]

  @@unique([text])
  @@index([categoryId])
}

model UserQuestion {
  id         Int      @id @default(autoincrement())
  userId     String
  questionId Int
  answerId   Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user             User             @relation(fields: [userId], references: [id])
  questionTemplate QuestionTemplate @relation(fields: [questionId], references: [id])
  userAnswer       UserAnswer?      @relation(fields: [answerId], references: [id])

  @@unique([userId, questionId])
}

// enum Visibility {
//   PUBLIC
//   FRIENDS
//   PRIVATE
// }

model UserAnswer {
  id         Int       @id @default(autoincrement())
  userId     String
  questionId Int
  text       String?
  visibility String    @default("PUBLIC")
  isDeleted  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  user             User             @relation(fields: [userId], references: [id])
  questionTemplate QuestionTemplate @relation(fields: [questionId], references: [id])

  UserQuestion UserQuestion[]
}
